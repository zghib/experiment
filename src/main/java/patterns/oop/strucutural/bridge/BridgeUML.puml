@startuml

note top of (Abstraction)
The bridge pattern is a design pattern used in software engineering which is meant to
"decouple an abstraction from its implementation so that the two can vary independently".
The bridge uses encapsulation, aggregation, and can use inheritance to separate responsibilities
into different classes.
When a class varies often, the features of object-oriented programming become very useful
because changes to a program's code can be made easily with minimal prior knowledge about the program.
The bridge pattern is useful when both the class and what it does vary often. The class itself can be
thought of as the abstraction and what the class can do as the implementation.
The bridge pattern can also be thought of as two layers of abstraction.
When there is only one fixed implementation, this pattern is known as the Pimpl idiom in the C++ world.
The bridge pattern is often confused with the adapter pattern.
In fact, the bridge pattern is often implemented using the class adapter
end note

class Abstraction{
 +operation()
}

class RefinedAbstraction{
 +operation()
}
Abstraction <|-- RefinedAbstraction

class Implementator{
+operationImpl()
}

Abstraction o-- Implementator : imp
class ConcreteImplementatorA{
}
Implementator <|-- ConcreteImplementatorA

class ConcreteImplementatorB{
}
Implementator <|-- ConcreteImplementatorB

note right of Abstraction
Abstraction (abstract class) defines the abstract interface
maintains the Implementor reference.

RefinedAbstraction (normal class)
extends the interface defined by Abstraction

Implementor (interface)
defines the interface for implementation classes

ConcreteImplementor (normal class)
implements the Implementor interface
end note

@enduml